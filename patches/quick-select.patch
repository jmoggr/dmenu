diff --git a/config.def.h b/config.def.h
index 1edb647..2b4a000 100644
--- a/config.def.h
+++ b/config.def.h
@@ -13,6 +13,10 @@ static const char *colors[SchemeLast][2] = {
 	[SchemeSel] = { "#eeeeee", "#005577" },
 	[SchemeOut] = { "#000000", "#00ffff" },
 };
+
+/* characters to use as quick select options, in the order they are to be used */
+static const char *quick_select_order = "abcdefghijklmnopqrstuvwxyz";
+
 /* -l option; if nonzero, dmenu uses vertical list with given number of lines */
 static unsigned int lines      = 0;
 
diff --git a/dmenu.1 b/dmenu.1
index 323f93c..fb45497 100644
--- a/dmenu.1
+++ b/dmenu.1
@@ -3,7 +3,7 @@
 dmenu \- dynamic menu
 .SH SYNOPSIS
 .B dmenu
-.RB [ \-bfiv ]
+.RB [ \-bfivs ]
 .RB [ \-l
 .IR lines ]
 .RB [ \-m
@@ -22,6 +22,8 @@ dmenu \- dynamic menu
 .IR color ]
 .RB [ \-w
 .IR windowid ]
+.RB [ \-qs
+.IR characters ]
 .P
 .BR dmenu_run " ..."
 .SH DESCRIPTION
@@ -80,6 +82,12 @@ prints version information to stdout, then exits.
 .TP
 .BI \-w " windowid"
 embed into windowid.
+.TP
+.BI \-qs " characters"
+characters to use as quick select options, in the order they are to be used
+.TP
+.B \-s
+start in quick select mode
 .SH USAGE
 dmenu is completely controlled by the keyboard.  Items are selected using the
 arrow keys, page up, page down, home, and end.
@@ -166,6 +174,9 @@ Paste from primary X selection
 .B C\-Y
 Paste from X clipboard
 .TP
+.B C\-s
+Toggle quick select mode
+.TP
 .B M\-b
 Move cursor to the start of the current word
 .TP
diff --git a/dmenu.c b/dmenu.c
index 65f25ce..d8fb85a 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -44,6 +44,7 @@ static struct item *items = NULL;
 static struct item *matches, *matchend;
 static struct item *prev, *curr, *next, *sel;
 static int mon = -1, screen;
+static int quick_select = 0;
 
 static Atom clip, utf8;
 static Display *dpy;
@@ -131,7 +132,7 @@ drawmenu(void)
 {
 	unsigned int curpos;
 	struct item *item;
-	int x = 0, y = 0, w;
+	int x = 0, y = 0, w, i;
 
 	drw_setscheme(drw, scheme[SchemeNorm]);
 	drw_rect(drw, 0, 0, mw, mh, 1, 1);
@@ -140,21 +141,40 @@ drawmenu(void)
 		drw_setscheme(drw, scheme[SchemeSel]);
 		x = drw_text(drw, x, 0, promptw, bh, lrpad / 2, prompt, 0);
 	}
+
 	/* draw input field */
 	w = (lines > 0 || !matches) ? mw - x : inputw;
 	drw_setscheme(drw, scheme[SchemeNorm]);
 	drw_text(drw, x, 0, w, bh, lrpad / 2, text, 0);
 
-	curpos = TEXTW(text) - TEXTW(&text[cursor]);
-	if ((curpos += lrpad / 2 - 1) < w) {
-		drw_setscheme(drw, scheme[SchemeNorm]);
-		drw_rect(drw, x + curpos, 2, 2, bh - 4, 1, 0);
+	/* draw input field cursor cursor */
+	if (!quick_select) {
+		curpos = TEXTW(text) - TEXTW(&text[cursor]);
+		if ((curpos += lrpad / 2 - 1) < w) {
+			drw_setscheme(drw, scheme[SchemeNorm]);
+			drw_rect(drw, x + curpos, 2, 2, bh - 4, 1, 0);
+		}
 	}
 
 	if (lines > 0) {
 		/* draw vertical list */
-		for (item = curr; item != next; item = item->right)
-			drawitem(item, x, y += bh, mw - x);
+		for (item = curr, i = 0; item != next; i += 1, item = item->right)
+			if (i < strlen(quick_select_order) && quick_select) {
+				char quick_char_string[2] = {quick_select_order[i], '\0'};
+				float lpad = bh/2.0 - (TEXTW(quick_char_string) - lrpad)/2.0;
+				drw_setscheme(drw, scheme[SchemeOut]);
+
+				/* if there is room, draw the quick select character in the left margin */
+				if (x > bh) {
+					drw_text(drw, x - bh, y + bh, bh, bh, lpad, quick_char_string, 0);
+					drawitem(item, x, y += bh, mw - x);
+				} else {
+					drw_text(drw, 0, y + bh, bh, bh, lpad, quick_char_string, 0);
+					drawitem(item, x + bh, y += bh, mw - x);
+				}
+			}
+			else
+				drawitem(item, x, y += bh, mw - x);
 	} else if (matches) {
 		/* draw horizontal list */
 		x += inputw;
@@ -164,8 +184,17 @@ drawmenu(void)
 			drw_text(drw, x, 0, w, bh, lrpad / 2, "<", 0);
 		}
 		x += w;
-		for (item = curr; item != next; item = item->right)
+		for (item = curr, i = 0; item != next; i += 1, item = item->right) {
+			if (i < strlen(quick_select_order) && quick_select) {
+				char quick_char_string[2] = {quick_select_order[i], '\0'};
+				float lpad = bh/2.0 - (TEXTW(quick_char_string) - lrpad)/2.0;
+				drw_setscheme(drw, scheme[SchemeOut]);
+				x = drw_text(drw, x, 0, bh, bh, lpad, quick_char_string, 0);
+			}
+
 			x = drawitem(item, x, 0, MIN(TEXTW(item->text), mw - x - TEXTW(">")));
+		}
+
 		if (next) {
 			w = TEXTW(">");
 			drw_setscheme(drw, scheme[SchemeNorm]);
@@ -341,6 +370,9 @@ keypress(XKeyEvent *ev)
 		case XK_n: ksym = XK_Down;      break;
 		case XK_p: ksym = XK_Up;        break;
 
+		case XK_s:
+			quick_select = (quick_select == 1) ? 0 : 1;
+			goto draw;
 		case XK_k: /* delete right */
 			text[cursor] = '\0';
 			match();
@@ -396,8 +428,24 @@ keypress(XKeyEvent *ev)
 	switch(ksym) {
 	default:
 insert:
-		if (!iscntrl(*buf))
-			insert(buf, len);
+		if (!iscntrl(*buf)) {
+			if (quick_select) {
+				char quick_char = buf[0];
+
+				int i = 0;
+				struct item *item;
+				for (item = curr; item != next && i < strlen(quick_select_order); i += 1, item = item->right)
+					if (quick_char == quick_select_order[i]) {
+						puts(item->text);
+						cleanup();
+						exit(0);
+					}
+
+				return;
+			} else {
+				insert(buf, len);
+			}
+		}
 		break;
 	case XK_Delete:
 		if (text[cursor] == '\0')
@@ -689,8 +737,9 @@ setup(void)
 static void
 usage(void)
 {
-	fputs("usage: dmenu [-bfiv] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
-	      "             [-nb color] [-nf color] [-sb color] [-sf color] [-w windowid]\n", stderr);
+	fputs("usage: dmenu [-bfivs] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
+	      "             [-nb color] [-nf color] [-sb color] [-sf color] [-w windowid]\n"
+	      "             [-qs characters]\n", stderr);
 	exit(1);
 }
 
@@ -712,7 +761,9 @@ main(int argc, char *argv[])
 		else if (!strcmp(argv[i], "-i")) { /* case-insensitive item matching */
 			fstrncmp = strncasecmp;
 			fstrstr = cistrstr;
-		} else if (i + 1 == argc)
+		} else if (!strcmp(argv[i], "-s")) /* start in quick select mode */
+			quick_select = 1;
+		else if (i + 1 == argc)
 			usage();
 		/* these options take one argument */
 		else if (!strcmp(argv[i], "-l"))   /* number of lines in vertical list */
@@ -733,6 +784,8 @@ main(int argc, char *argv[])
 			colors[SchemeSel][ColFg] = argv[++i];
 		else if (!strcmp(argv[i], "-w"))   /* embedding window id */
 			embed = argv[++i];
+		else if (!strcmp(argv[i], "-qs"))  /* quick select order */
+			quick_select_order = argv[++i];
 		else
 			usage();
 
